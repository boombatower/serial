<?php
/**
 * @file
 * Defines serial field type.
 *
 * @author Jim Berry ("solotandem", http://drupal.org/user/240748)
 */

/**
 * Implements hook_help().
 */
function serial_help($path, $arg) {
  switch ($path) {
    case 'admin/help#serial':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Serial module defines a serial field type for the Field module. Values are stored as serialized strings. See the <a href="@field-help">Field module help page</a> for more information about fields.', array('@field-help' => url('admin/help/field'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_info().
 */
function serial_field_info() {
  // @todo Why does this field have translatable = 1 in `field_config` table?
  return array(
    'serial' => array(
      'label' => t('Serial'),
      'description' => t('This field stores varchar text in the database.'),
      'settings' => array('max_length' => 255),
      'instance_settings' => array(
        'allowed_tokens' => 'T_ARRAY, T_CONSTANT_ENCAPSED_STRING, T_DNUMBER, T_DOUBLE_ARROW, T_LNUMBER, T_STRING, T_WHITESPACE',
      ),
      'default_widget' => 'serial_textfield',
      'default_formatter' => 'serial_default',
    ),
    'serial_long' => array(
      'label' => t('Long serial'),
      'description' => t('This field stores long serial in the database.'),
      'instance_settings' => array(
        'allowed_tokens' => 'T_ARRAY, T_CONSTANT_ENCAPSED_STRING, T_DNUMBER, T_DOUBLE_ARROW, T_LNUMBER, T_STRING, T_WHITESPACE',
      ),
      'default_widget' => 'serial_textarea',
      'default_formatter' => 'serial_default',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function serial_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form = array();

  if ($field['type'] == 'serial') {
    $form['max_length'] = array(
      '#type' => 'textfield',
      '#title' => t('Maximum length'),
      '#default_value' => $settings['max_length'],
      '#required' => TRUE,
      '#description' => t('The maximum length of the field in characters.'),
      '#element_validate' => array('_element_validate_integer_positive'),
      // @todo: If $has_data, add a validate handler that only allows
      // max_length to increase.
      '#disabled' => $has_data,
    );
  }

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function serial_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form['allowed_tokens'] = array(
    '#type' => 'textarea',
    '#title' => t('Allowed tokens'),
    '#default_value' => $settings['allowed_tokens'],
    '#required' => TRUE,
    '#description' => t('The comma-separated list of allowed !tokens. Enter either constant strings or integer values. Example: T_CONSTANT_ENCAPSED_STRING or 315.', array('!tokens' => l('PHP tokens', 'http://us.php.net/manual/en/tokens.php'))),
    '#element_validate' => array('serial_field_instance_settings_validate'),
  );

  return $form;
}

/**
 * Form element validation handler for allowed_tokens element.
 */
function serial_field_instance_settings_validate($element, &$form_state) {
  if (empty($element['#value'])) {
    return;
  }
  $message = t('%field: this field must contain a comma-separated list of valid PHP tokens.', array('%field' => $element['#title']));
  $tokens = serial_eval($element['#value']);
  if (!is_array($tokens)) {
    form_error($element, $message);
  }
  else {
    $invalid = FALSE;
    foreach ($tokens as $token) {
      if (is_integer($token)) {
        if (!token_name($token)) {
          $invalid = TRUE;
          $errors[] = $token;
        }
        else {
          drupal_set_message('Valid token: ' . token_name($token) . ' (' . $token . ')', 'warning');
        }
      }
      else {
        $invalid = TRUE;
        $errors[] = $token;
      }
    }
    if ($invalid) {
      form_error($element, $message . t('<br />Invalid tokens are: @tokens', array('@tokens' => implode(', ',$errors))));
    }
  }
}

/**
 * Implements hook_field_load().
 */
function serial_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Assume the field was saved after passing through hook_field_validate()
      // so we do not need to check text length on 'serial' fields.
      $items[$id][$delta]['value'] = unserialize($item['value']);
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function serial_field_presave($entity_type, &$entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    if (isset($item['value']) && !is_array($item['value'])) {
      // If the field has been displayed, then the value is a string. Change value
      // to array as expected by node hooks (e.g. hook_node_update()).
      $items[$delta]['value'] = serial_eval($item['value']);
    }
  }
}

/**
 * Implements hook_field_insert().
 */
function serial_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    if (isset($item['value'])) {
      $items[$delta]['value'] = serialize($item['value']);
    }
  }
}

/**
 * Implements hook_field_update().
 */
function serial_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    if (isset($item['value'])) {
      $items[$delta]['value'] = serialize($item['value']);
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function serial_field_is_empty($item, $field) {
  if (!isset($item['value']) || $item['value'] === '') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function serial_field_formatter_info() {
  return array(
    'serial_default' => array(
      'label' => t('Default'),
      'description' => t('Represent serialized values in an easy to read manner.'),
      'field types' => array('serial', 'serial_long'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function serial_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'serial_default':
      foreach ($items as $delta => $item) {
        // Build form element.
        $element[$delta]['#type'] = 'markup';
        $element[$delta]['#markup'] = serial_display($item['value'], 'view', $instance['widget']['type']);
      }
      break;
  }

  return $element;
}

/**
 * Returns PHP-evaluated string.
 *
 * @return
 *   Evaluated value.
 */
function serial_eval($string) {
  return @eval('return array(' . $string . ');');
}

/**
 * Returns array converted to string.
 *
 * @param string $display_type
 *   Display type of 'view' or 'edit'.
 *
 * @return
 *   Display string.
 */
function serial_display($value, $display_type = 'view', $widget_type = 'serial_textarea') {
  $string = var_export($value, TRUE);
  // Tidy the appearance to match print_r() format.
  $string = preg_replace('/=>\s+array/m', '=> array', $string);
  $string = str_replace('array (', 'array(', $string);

  if ($widget_type == 'serial_textfield') {
    // Display as inline array.
    $string = preg_replace('/\n\s*/', ' ', $string);
  }
  if ($display_type == 'edit') {
    // Remove the outermost 'array()' string.
    $string = substr($string, 7, -1);
  }
  else {
    $string = highlight_string('<?php ' . $string, TRUE);
  }

  return $string;
}

/**
 * Implements hook_field_widget_info().
 */
function serial_field_widget_info() {
  return array(
    'serial_textfield' => array(
      'label' => t('Serial field'),
      'field types' => array('serial'),
      'settings' => array('size' => -1), // array('size' => 60),
    ),
    'serial_textarea' => array(
      'label' => t('Serial long (multiple rows)'),
      'field types' => array('serial_long'),
      'settings' => array('rows' => 5),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function serial_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'serial_textfield') {
    $form['size'] = array(
      '#type' => 'textfield',
      '#title' => t('Size of textfield'),
      '#default_value' => $settings['size'],
      '#required' => TRUE,
      '#description' => t('The size attribute of the text field. A value of -1 will set a width style of 100%.'),
      '#element_validate' => array('_element_validate_integer'), // @todo -1 or positive
    );
  }
  else {
    $form['rows'] = array(
      '#type' => 'textfield',
      '#title' => t('Rows'),
      '#default_value' => $settings['rows'],
      '#required' => TRUE,
      '#element_validate' => array('_element_validate_integer_positive'),
    );
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function serial_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if (isset($items[$delta]['value'])) {
    $items[$delta]['value'] = serial_display($items[$delta]['value'], 'edit', $instance['widget']['type']);
  }

  switch ($instance['widget']['type']) {
    case 'serial_textfield':
      $element += array(
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
        '#size' => $instance['widget']['settings']['size'],
        '#maxlength' => $field['settings']['max_length'],
        '#attributes' => array('class' => array('text-full')),
      );
      if ($instance['widget']['settings']['size'] == -1) {
        unset($element['#size']);
        $element['#attributes']['style'] = array('width: 100%');
      }
      break;

    case 'serial_textarea':
      $element += array(
        '#type' => 'textarea',
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
        '#rows' => $instance['widget']['settings']['rows'],
        '#attributes' => array('class' => array('text-full')),
      );
      break;
  }

  $element['#element_validate'][] = 'serial_field_widget_validate';

  return array('value' => $element);
}

/**
 * Form element validation handler for serial field element.
 *
 * Error checks:
 * - The value exceeds the maximum length.
 * - The value contains non-allowed tokens.
 * - The value is not valid php syntax.
 * - The value contains invalid items.
 */
function serial_field_widget_validate($element, &$form_state, $form) {
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $instance = $form_state['field'][$element['#field_name']][$element['#language']]['instance'];

  $value = $element['#value'];

  if (!trim($value)) {
    form_set_value($element, array(), $form_state);
    return;
  }

  // Check the field length.
  if (!empty($field['settings']['max_length']) && drupal_strlen($value) > $field['settings']['max_length']) {
    switch ($column) {
      case 'value':
        $message = t('%name: this field may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length']));
        break;
    }
    form_error($element, $message);
  }

  // Check the field contents.

  // Make an array of allowed tokens.
  $strings = explode(', ', $instance['settings']['allowed_tokens']);
  $allowed = array_map('constant', $strings);
  // Confirm the value contains only allowed tokens.
  $tokens = token_get_all('<?php ' . $value);
  // Ignore the T_OPEN_TAG token.
  array_shift($tokens);
  $valid = TRUE;
  foreach ($tokens as $token) {
    if (is_array($token) && !in_array($token[0], $allowed)) {
      $message = t('%name: this field may only contain numbers, strings, commas, or whitespace; or arrays constructed from the same elements.', array('%name' => $instance['label']));
      form_error($element, $message);
      return;
    }
  }
  // Confirm the value is valid php syntax.
  $value = serial_eval($value);
  if (!is_array($value)) {
    $message = t('%name: this field must contain valid PHP syntax.', array('%name' => $instance['label']));
    form_error($element, $message);
    return;
  }
  else {
    // Allow interested parties to validate the array.
    if ($errors = module_invoke_all('serial_validate', $value)) {
      $message = t('%name: this field contains these invalid items.', array('%name' => $instance['label'])) . theme('item_list', array('items' => $errors));
      form_error($element, $message);
      return;
    }
  }

  form_set_value($element, $value, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function serial_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['value'], $error['message']);
}
